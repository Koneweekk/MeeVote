create user meevote
identified by 1004
default tablespace users
temporary tablespace temp;

grant connect, resource, dba to meevote;

CREATE TABLE member (
	email nvarchar2(2000)		NOT NULL,
	password	nvarchar2(2000)		NOT NULL,
	name	nvarchar2(2000)		NOT NULL,
	phone_number	nvarchar2(2000)		NOT NULL,
	address	nvarchar2(2000)		NOT NULL,
	img_src	nvarchar2(2000)		NOT NULL
);

CREATE TABLE schedule_category (
	schedule_category_id	number		NOT NULL,
	category_name	nvarchar2(2000)		NOT NULL,
	color	nvarchar2(2000)		NOT NULL
);
CREATE SEQUENCE seq_schedule_category;

CREATE TABLE member_schedule (
	email	nvarchar2(2000)		NOT NULL,
	schedule_id	number		NOT NULL,
	is_owner	number(1)		NOT NULL
);

CREATE TABLE schedule (
	schedule_id	number		NOT NULL,
	schedule_category_id	number		NOT NULL,
	name	nvarchar2(2000)		NOT NULL,
	description	nvarchar2(2000)		NULL,
	start_date	date		NOT NULL,
	end_date	date		NOT NULL,
	is_group	number(1)		NOT NULL,
	vote_deadline	date		NULL
);
CREATE SEQUENCE seq_schedule;

CREATE TABLE place_to_vote (
	place_to_vote_id	number		NOT NULL,
	schedule_id	number		NOT NULL,
	place_name	nvarchar2(2000)		NOT NULL,
	lat	nvarchar2(2000)		NOT NULL,
	lng	nvarchar2(2000)		NOT NULL
);
CREATE SEQUENCE seq_place_to_vote;

CREATE TABLE place_voted (
	place_voted_id	number		NOT NULL,
	email	nvarchar2(2000)		NOT NULL,
	schedule_id	number		NOT NULL,
	place_to_vote_id	number		NOT NULL
);
CREATE SEQUENCE seq_place_voted;

CREATE TABLE notify (
	notify_id	number		NOT NULL,
	email	nvarchar2(2000)		NOT NULL,
	schedule_id	number		NOT NULL,
	notify_category_id	number		NOT NULL,
	message	nvarchar2(2000)		NOT NULL,
	is_read	number(1)		NOT NULL
);
CREATE SEQUENCE seq_notify;

CREATE TABLE notify_category (
	notify_category_id	number		NOT NULL,
	category_name	nvarchar2(2000)		NOT NULL
);
CREATE SEQUENCE seq_notify_category;

CREATE TABLE schedule_place (
	schedule_id	number		NOT NULL,
	place_name	nvarchar2(2000)		NOT NULL,
	lat	nvarchar2(2000)		NOT NULL,
	lng	nvarchar2(2000)		NOT NULL
);

CREATE TABLE departure_place (
	email	nvarchar2(2000)		NOT NULL,
	schedule_id	number		NOT NULL,
	place_name	nvarchar2(2000)		NOT NULL,
	lat	nvarchar2(2000)		NOT NULL,
	lng	nvarchar2(2000)		NOT NULL
);

ALTER TABLE member ADD CONSTRAINT PK_MEMBER PRIMARY KEY (
	email
);

ALTER TABLE schedule_category ADD CONSTRAINT PK_SCHEDULE_CATEGORY PRIMARY KEY (
	schedule_category_id
);

ALTER TABLE member_schedule ADD CONSTRAINT PK_MEMBER_SCHEDULE PRIMARY KEY (
	email,
	schedule_id
);

ALTER TABLE schedule ADD CONSTRAINT PK_SCHEDULE PRIMARY KEY (
	schedule_id
);

ALTER TABLE place_to_vote ADD CONSTRAINT PK_PLACE_TO_VOTE PRIMARY KEY (
	place_to_vote_id
);

ALTER TABLE place_voted ADD CONSTRAINT PK_PLACE_VOTED PRIMARY KEY (
	place_voted_id
);

ALTER TABLE notify ADD CONSTRAINT PK_NOTIFY PRIMARY KEY (
	notify_id
);

ALTER TABLE notify_category ADD CONSTRAINT PK_NOTIFY_CATEGORY PRIMARY KEY (
	notify_category_id
);

ALTER TABLE schedule_place ADD CONSTRAINT PK_SCHEDULE_PLACE PRIMARY KEY (
	schedule_id
);

ALTER TABLE departure_place ADD CONSTRAINT PK_DEPARTURE_PLACE PRIMARY KEY (
	email,
	schedule_id
);

ALTER TABLE member_schedule ADD CONSTRAINT FK_m_TO_m_s_1 FOREIGN KEY (
	email
)
REFERENCES member (
	email
) ON DELETE CASCADE;

ALTER TABLE member_schedule ADD CONSTRAINT FK_s_TO_m_s_1 FOREIGN KEY (
	schedule_id
)
REFERENCES schedule (
	schedule_id
) ON DELETE CASCADE;

ALTER TABLE schedule ADD CONSTRAINT FK_s_c_TO_s_1 FOREIGN KEY (
	schedule_category_id
)
REFERENCES schedule_category (
	schedule_category_id
);

ALTER TABLE place_to_vote ADD CONSTRAINT FK_s_TO_p_t_v_1 FOREIGN KEY (
	schedule_id
)
REFERENCES schedule (
	schedule_id
) ON DELETE CASCADE;

ALTER TABLE place_voted ADD CONSTRAINT FK_m_s_TO_p_v_1 FOREIGN KEY (
	email, schedule_id
)
REFERENCES member_schedule (
	email, schedule_id
) ON DELETE CASCADE;

ALTER TABLE place_voted ADD CONSTRAINT FK_p_t_v_TO_p_v_1 FOREIGN KEY (
	place_to_vote_id
)
REFERENCES place_to_vote (
	place_to_vote_id
) ON DELETE CASCADE;

ALTER TABLE notify ADD CONSTRAINT FK_m_s_TO_n_1 FOREIGN KEY (
	email, schedule_id
)
REFERENCES member_schedule (
	email, schedule_id
) ON DELETE CASCADE;

ALTER TABLE notify ADD CONSTRAINT FK_n_c_TO_n_1 FOREIGN KEY (
	notify_category_id
)
REFERENCES notify_category (
	notify_category_id
);

ALTER TABLE schedule_place ADD CONSTRAINT FK_s_TO_s_p_1 FOREIGN KEY (
	schedule_id
)
REFERENCES schedule (
	schedule_id
) ON DELETE CASCADE;

ALTER TABLE departure_place ADD CONSTRAINT FK_m_s_TO_d_p_1 FOREIGN KEY (
	email, schedule_id
)
REFERENCES member_schedule (
	email, schedule_id
) ON DELETE CASCADE;

ALTER TABLE place_to_vote MODIFY place_name NVARCHAR2(1000);
ALTER TABLE place_to_vote MODIFY lat NVARCHAR2(1000);
ALTER TABLE place_to_vote MODIFY lng NVARCHAR2(1000);

CREATE UNIQUE INDEX uq_place_to_vote
ON place_to_vote (schedule_id, lat, lng);

ALTER TABLE place_to_vote
ADD CONSTRAINT uq_place_to_vote UNIQUE (schedule_id, lat, lng);

INSERT INTO schedule_category VALUES (seq_schedule_category.nextval, '기타', '#4FD1C5');
INSERT INTO schedule_category VALUES (seq_schedule_category.nextval, '스터디', 'green');
INSERT INTO schedule_category VALUES (seq_schedule_category.nextval, '회의', 'orange');
INSERT INTO schedule_category VALUES (seq_schedule_category.nextval, '식사', 'yellow');
INSERT INTO schedule_category VALUES (seq_schedule_category.nextval, '회식', 'tomato');
INSERT INTO schedule_category VALUES (seq_schedule_category.nextval, '여행', 'blue');

INSERT INTO notify_category VALUES(seq_notify_category.NEXTVAL, '모임 일정 초대');
INSERT INTO notify_category VALUES(seq_notify_category.NEXTVAL, '모임 일정 장소 확정');
INSERT INTO notify_category VALUES(seq_notify_category.NEXTVAL, '일정 예고');
commit;


create or replace PROCEDURE confirm_place AS
BEGIN
    FOR schedule_rec IN (
        SELECT s.schedule_id, s.vote_deadline
        FROM schedule s
        WHERE s.is_group = 1
        AND NOT EXISTS (
            SELECT 1 FROM schedule_place sp WHERE sp.schedule_id = s.schedule_id
        )
        AND TO_CHAR(s.vote_deadline, 'YYYY-MM-DD HH24:MI') = TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI')
    ) LOOP
        INSERT INTO schedule_place (schedule_id, place_name, lat, lng)
        SELECT p.schedule_id, p.place_name, p.lat, p.lng
        FROM(
            select ptv.schedule_id, ptv.place_name, ptv.lat, ptv.lng, NVL(pv.count, 0) as vote_count
            from place_to_vote ptv left join(
                select place_to_vote_id, count(*) as count
                from place_voted
                group by place_to_vote_id
            ) pv on ptv.place_to_vote_id = pv.place_to_vote_id
            where ptv.schedule_id = schedule_rec.schedule_id
            order by vote_count desc
        ) p WHERE ROWNUM = 1;
        IF SQL%ROWCOUNT > 0 THEN
            FOR member_rec IN (
                SELECT ms.email, s.name AS schedule_name
                FROM member_schedule ms
                JOIN schedule s ON ms.schedule_id = s.schedule_id
                WHERE ms.schedule_id = schedule_rec.schedule_id
            ) LOOP
                INSERT INTO notify (notify_id, email, schedule_id, notify_category_id, message, is_read)
                VALUES (seq_notify.NEXTVAL, member_rec.email, schedule_rec.schedule_id, 2, '모임 일정 장소가 확정되었습니다. 장소 투표에 참여하세요.', 0);
            END LOOP;
        END IF;
    END LOOP;
END;

BEGIN
    DBMS_SCHEDULER.CREATE_JOB(
        job_name        => 'confirm_place_job',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN confirm_place; END;',
        start_date      => TRUNC(SYSDATE + INTERVAL '1' MINUTE, 'MI'),
        repeat_interval => 'FREQ=MINUTELY',
        enabled         => TRUE
    );
END;


CREATE OR REPLACE PROCEDURE schedule_reminder AS
BEGIN
    FOR schedule_rec IN (
        SELECT s.schedule_id, s.name, ms.email, s.start_date
        FROM schedule s
        JOIN member_schedule ms ON s.schedule_id = ms.schedule_id
        WHERE (s.is_group = 0 OR (s.is_group = 1 AND EXISTS (SELECT 1 FROM schedule_place sp WHERE sp.schedule_id = s.schedule_id)))
        AND TRUNC(s.start_date) - 1 = TRUNC(SYSDATE)
    )
    LOOP
        INSERT INTO notify (notify_id, email, schedule_id, notify_category_id, message, is_read)
        VALUES (seq_notify.nextval, schedule_rec.email, schedule_rec.schedule_id, 3,
                '내일 예정된 일정이 있습니다.', 0);
    END LOOP;
    COMMIT;
END schedule_reminder;



BEGIN
    DBMS_SCHEDULER.CREATE_JOB(
        job_name        => 'schedule_reminder_job',
        job_type        => 'STORED_PROCEDURE',
        job_action      => 'schedule_reminder',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=DAILY; BYHOUR=20; BYMINUTE=0; BYSECOND=0;',
        enabled         => TRUE
    );
END;